// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organizations/Tenants
model Organization {
  id        String   @id @default(cuid())
  name      String
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users       User[]
  agents      Agent[]
  assessments Assessment[]

  @@map("organizations")
}

// Users and authentication
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  passwordHash   String    @map("password_hash")
  role           UserRole  @default(USER)
  organizationId String    @map("organization_id")
  lastLogin      DateTime? @map("last_login")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

// Agents and their configurations
model Agent {
  id             String          @id @default(cuid())
  organizationId String          @map("organization_id")
  hostname       String
  version        String
  status         AgentStatus     @default(OFFLINE)
  configuration  Json            @default("{}")
  lastSeen       DateTime?       @map("last_seen")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assessments  Assessment[]

  @@unique([organizationId, hostname])
  @@map("agents")
}

enum AgentStatus {
  ONLINE
  OFFLINE
  ERROR
}

// Assessment runs
model Assessment {
  id             String            @id @default(cuid())
  organizationId String            @map("organization_id")
  agentId        String            @map("agent_id")
  status         AssessmentStatus  @default(PENDING)
  startTime      DateTime          @map("start_time")
  endTime        DateTime?         @map("end_time")
  metadata       Json              @default("{}")
  overallRiskScore Float?          @map("overall_risk_score")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  // Relations
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent        Agent             @relation(fields: [agentId], references: [id], onDelete: Cascade)
  results      AssessmentResult[]
  reports      Report[]

  @@map("assessments")
}

enum AssessmentStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// Individual check results
model AssessmentResult {
  id           String    @id @default(cuid())
  assessmentId String    @map("assessment_id")
  checkType    CheckType @map("check_type")
  resultData   Json      @map("result_data")
  riskScore    Float     @map("risk_score")
  riskLevel    RiskLevel @map("risk_level")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

enum CheckType {
  ACCOUNTS_BYPASS_PASS_POLICY
  DC_OPEN_PORTS_CHECK
  DNS_CONFIG_CHECK
  EOL_SOFTWARE_CHECK
  ENABLED_INACTIVE_ACCOUNTS
  NETWORK_PROTOCOLS_CHECK
  PSHELL_EXEC_POLICY_CHECK
  SERVICE_ACCOUNTS_DOMAIN_ADMIN
  PRIVILEGED_ACCOUNTS_NO_EXPIRE
  WIN_FEATURE_SECURITY_CHECK
  WIN_FIREWALL_STATUS_CHECK
  WIN_UPDATE_CHECK
  PASSWORD_CRACK
  KERBEROASTED_ACCOUNTS
  SMB_SIGNING_CHECK
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Generated reports
model Report {
  id               String   @id @default(cuid())
  assessmentId     String   @map("assessment_id")
  title            String
  templateVersion  String   @map("template_version")
  htmlContent      String   @map("html_content")
  organizationName String   @map("organization_name")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Audit logs for security events
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  resource  String?
  details   Json     @default("{}")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}